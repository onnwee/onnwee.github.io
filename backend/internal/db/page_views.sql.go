// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: page_views.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countViewsByPath = `-- name: CountViewsByPath :one
SELECT COUNT(*) FROM page_views
WHERE path = $1
`

func (q *Queries) CountViewsByPath(ctx context.Context, path string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countViewsByPath, path)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPageView = `-- name: CreatePageView :exec
INSERT INTO page_views (path, referrer, user_agent, session_id, ip_address, viewed_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreatePageViewParams struct {
	Path      string         `json:"path"`
	Referrer  sql.NullString `json:"referrer"`
	UserAgent sql.NullString `json:"user_agent"`
	SessionID sql.NullString `json:"session_id"`
	IpAddress sql.NullString `json:"ip_address"`
	ViewedAt  time.Time      `json:"viewed_at"`
}

func (q *Queries) CreatePageView(ctx context.Context, arg CreatePageViewParams) error {
	_, err := q.db.ExecContext(ctx, createPageView,
		arg.Path,
		arg.Referrer,
		arg.UserAgent,
		arg.SessionID,
		arg.IpAddress,
		arg.ViewedAt,
	)
	return err
}

const getViewsByPath = `-- name: GetViewsByPath :many
SELECT id, path, referrer, user_agent, session_id, ip_address, viewed_at FROM page_views
WHERE path = $1
ORDER BY viewed_at DESC
LIMIT $2 OFFSET $3
`

type GetViewsByPathParams struct {
	Path   string `json:"path"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetViewsByPath(ctx context.Context, arg GetViewsByPathParams) ([]PageView, error) {
	rows, err := q.db.QueryContext(ctx, getViewsByPath, arg.Path, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PageView
	for rows.Next() {
		var i PageView
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.Referrer,
			&i.UserAgent,
			&i.SessionID,
			&i.IpAddress,
			&i.ViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
