// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, ip_address, user_agent, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, ip_address, user_agent, created_at, expires_at
`

type CreateSessionParams struct {
	UserID    sql.NullInt32  `json:"user_id"`
	IpAddress sql.NullString `json:"ip_address"`
	UserAgent sql.NullString `json:"user_agent"`
	ExpiresAt sql.NullTime   `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.UserID,
		arg.IpAddress,
		arg.UserAgent,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const expireSession = `-- name: ExpireSession :exec
UPDATE sessions
SET expires_at = now()
WHERE id = $1
`

func (q *Queries) ExpireSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, expireSession, id)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, ip_address, user_agent, created_at, expires_at FROM sessions
WHERE id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const listSessionsByUser = `-- name: ListSessionsByUser :many
SELECT id, user_id, ip_address, user_agent, created_at, expires_at FROM sessions
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListSessionsByUser(ctx context.Context, userID sql.NullInt32) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, listSessionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
