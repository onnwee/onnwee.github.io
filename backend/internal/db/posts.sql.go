// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (title, slug, summary, content, tags, is_draft, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, title, slug, summary, content, tags, is_draft, created_at, updated_at, user_id
`

type CreatePostParams struct {
	Title   string         `json:"title"`
	Slug    string         `json:"slug"`
	Summary sql.NullString `json:"summary"`
	Content string         `json:"content"`
	Tags    []string       `json:"tags"`
	IsDraft sql.NullBool   `json:"is_draft"`
	UserID  sql.NullInt32  `json:"user_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Slug,
		arg.Summary,
		arg.Content,
		pq.Array(arg.Tags),
		arg.IsDraft,
		arg.UserID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Summary,
		&i.Content,
		pq.Array(&i.Tags),
		&i.IsDraft,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPostBySlug = `-- name: GetPostBySlug :one
SELECT id, title, slug, summary, content, tags, is_draft, created_at, updated_at, user_id FROM posts WHERE slug = $1
`

func (q *Queries) GetPostBySlug(ctx context.Context, slug string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostBySlug, slug)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Summary,
		&i.Content,
		pq.Array(&i.Tags),
		&i.IsDraft,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, slug, summary, content, tags, is_draft, created_at, updated_at, user_id FROM posts
WHERE is_draft = FALSE
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Summary,
			&i.Content,
			pq.Array(&i.Tags),
			&i.IsDraft,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET title = $2,
    summary = $3,
    content = $4,
    tags = $5,
    is_draft = $6,
    updated_at = NOW()
WHERE id = $1
RETURNING id, title, slug, summary, content, tags, is_draft, created_at, updated_at, user_id
`

type UpdatePostParams struct {
	ID      int32          `json:"id"`
	Title   string         `json:"title"`
	Summary sql.NullString `json:"summary"`
	Content string         `json:"content"`
	Tags    []string       `json:"tags"`
	IsDraft sql.NullBool   `json:"is_draft"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Summary,
		arg.Content,
		pq.Array(arg.Tags),
		arg.IsDraft,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Summary,
		&i.Content,
		pq.Array(&i.Tags),
		&i.IsDraft,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
