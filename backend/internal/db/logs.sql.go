// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: logs.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createLog = `-- name: CreateLog :one
INSERT INTO logs (level, message, context, ip_address, created_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, level, message, context, ip_address, created_at
`

type CreateLogParams struct {
	Level     string          `json:"level"`
	Message   string          `json:"message"`
	Context   json.RawMessage `json:"context"`
	IpAddress sql.NullString  `json:"ip_address"`
	CreatedAt time.Time       `json:"created_at"`
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.db.QueryRowContext(ctx, createLog,
		arg.Level,
		arg.Message,
		arg.Context,
		arg.IpAddress,
		arg.CreatedAt,
	)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Level,
		&i.Message,
		&i.Context,
		&i.IpAddress,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLog = `-- name: DeleteLog :exec
DELETE FROM logs
WHERE id = $1
`

func (q *Queries) DeleteLog(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteLog, id)
	return err
}

const getLogByID = `-- name: GetLogByID :one
SELECT id, level, message, context, ip_address, created_at FROM logs
WHERE id = $1
`

func (q *Queries) GetLogByID(ctx context.Context, id int32) (Log, error) {
	row := q.db.QueryRowContext(ctx, getLogByID, id)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Level,
		&i.Message,
		&i.Context,
		&i.IpAddress,
		&i.CreatedAt,
	)
	return i, err
}

const listLogs = `-- name: ListLogs :many
SELECT id, level, message, context, ip_address, created_at FROM logs
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLogs(ctx context.Context, arg ListLogsParams) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, listLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Level,
			&i.Message,
			&i.Context,
			&i.IpAddress,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
