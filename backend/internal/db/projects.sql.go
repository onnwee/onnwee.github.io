// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: projects.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    title, slug, description, repo_url, live_url,
    summary, tags, footer, href, external, color, emoji, content, image, embed,
    user_id
)
VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, $8, $9, $10, $11, $12, $13, $14, $15,
    $16
)
RETURNING id, title, slug, description, repo_url, live_url, summary, tags, footer, href, external, color, emoji, content, image, embed, created_at, updated_at, user_id
`

type CreateProjectParams struct {
	Title       string         `json:"title"`
	Slug        string         `json:"slug"`
	Description sql.NullString `json:"description"`
	RepoUrl     sql.NullString `json:"repo_url"`
	LiveUrl     sql.NullString `json:"live_url"`
	Summary     sql.NullString `json:"summary"`
	Tags        []string       `json:"tags"`
	Footer      sql.NullString `json:"footer"`
	Href        sql.NullString `json:"href"`
	External    bool           `json:"external"`
	Color       sql.NullString `json:"color"`
	Emoji       sql.NullString `json:"emoji"`
	Content     sql.NullString `json:"content"`
	Image       sql.NullString `json:"image"`
	Embed       sql.NullString `json:"embed"`
	UserID      sql.NullInt32  `json:"user_id"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.RepoUrl,
		arg.LiveUrl,
		arg.Summary,
		pq.Array(arg.Tags),
		arg.Footer,
		arg.Href,
		arg.External,
		arg.Color,
		arg.Emoji,
		arg.Content,
		arg.Image,
		arg.Embed,
		arg.UserID,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.RepoUrl,
		&i.LiveUrl,
		&i.Summary,
		pq.Array(&i.Tags),
		&i.Footer,
		&i.Href,
		&i.External,
		&i.Color,
		&i.Emoji,
		&i.Content,
		&i.Image,
		&i.Embed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getProjectBySlug = `-- name: GetProjectBySlug :one
SELECT id, title, slug, description, repo_url, live_url, summary, tags, footer, href, external, color, emoji, content, image, embed, created_at, updated_at, user_id FROM projects
WHERE slug = $1
`

func (q *Queries) GetProjectBySlug(ctx context.Context, slug string) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectBySlug, slug)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.RepoUrl,
		&i.LiveUrl,
		&i.Summary,
		pq.Array(&i.Tags),
		&i.Footer,
		&i.Href,
		&i.External,
		&i.Color,
		&i.Emoji,
		&i.Content,
		&i.Image,
		&i.Embed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT id, title, slug, description, repo_url, live_url, summary, tags, footer, href, external, color, emoji, content, image, embed, created_at, updated_at, user_id FROM projects
ORDER BY created_at DESC
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.RepoUrl,
			&i.LiveUrl,
			&i.Summary,
			pq.Array(&i.Tags),
			&i.Footer,
			&i.Href,
			&i.External,
			&i.Color,
			&i.Emoji,
			&i.Content,
			&i.Image,
			&i.Embed,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET title = $2,
    description = $3,
    repo_url = $4,
    live_url = $5,
    summary = $6,
    tags = $7,
    footer = $8,
    href = $9,
    external = $10,
    color = $11,
    emoji = $12,
    content = $13,
    image = $14,
    embed = $15,
    updated_at = NOW()
WHERE id = $1
RETURNING id, title, slug, description, repo_url, live_url, summary, tags, footer, href, external, color, emoji, content, image, embed, created_at, updated_at, user_id
`

type UpdateProjectParams struct {
	ID          int32          `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	RepoUrl     sql.NullString `json:"repo_url"`
	LiveUrl     sql.NullString `json:"live_url"`
	Summary     sql.NullString `json:"summary"`
	Tags        []string       `json:"tags"`
	Footer      sql.NullString `json:"footer"`
	Href        sql.NullString `json:"href"`
	External    bool           `json:"external"`
	Color       sql.NullString `json:"color"`
	Emoji       sql.NullString `json:"emoji"`
	Content     sql.NullString `json:"content"`
	Image       sql.NullString `json:"image"`
	Embed       sql.NullString `json:"embed"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.RepoUrl,
		arg.LiveUrl,
		arg.Summary,
		pq.Array(arg.Tags),
		arg.Footer,
		arg.Href,
		arg.External,
		arg.Color,
		arg.Emoji,
		arg.Content,
		arg.Image,
		arg.Embed,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.RepoUrl,
		&i.LiveUrl,
		&i.Summary,
		pq.Array(&i.Tags),
		&i.Footer,
		&i.Href,
		&i.External,
		&i.Color,
		&i.Emoji,
		&i.Content,
		&i.Image,
		&i.Embed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
