// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package db

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (title, slug, description, repo_url, live_url)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, slug, description, repo_url, live_url, created_at, updated_at
`

type CreateProjectParams struct {
	Title       string         `json:"title"`
	Slug        string         `json:"slug"`
	Description sql.NullString `json:"description"`
	RepoUrl     sql.NullString `json:"repo_url"`
	LiveUrl     sql.NullString `json:"live_url"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.RepoUrl,
		arg.LiveUrl,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.RepoUrl,
		&i.LiveUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getProjectBySlug = `-- name: GetProjectBySlug :one
SELECT id, title, slug, description, repo_url, live_url, created_at, updated_at FROM projects WHERE slug = $1
`

func (q *Queries) GetProjectBySlug(ctx context.Context, slug string) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectBySlug, slug)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.RepoUrl,
		&i.LiveUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT id, title, slug, description, repo_url, live_url, created_at, updated_at FROM projects
ORDER BY created_at DESC
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.RepoUrl,
			&i.LiveUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET title = $2, description = $3, repo_url = $4, live_url = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, title, slug, description, repo_url, live_url, created_at, updated_at
`

type UpdateProjectParams struct {
	ID          int32          `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	RepoUrl     sql.NullString `json:"repo_url"`
	LiveUrl     sql.NullString `json:"live_url"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.RepoUrl,
		arg.LiveUrl,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.RepoUrl,
		&i.LiveUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
